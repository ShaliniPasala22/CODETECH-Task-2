# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score


# Generate a synthetic dataset
np.random.seed(42)  
X = np.random.rand(100, 1) * 10  
y = 2.5 * X + np.random.randn(100, 1) * 2 


# Convert to a DataFrame for easier handling 
data = pd.DataFrame({'Feature': X.flatten(), 'Target': y.flatten()})
data.head()

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)

# Initialize and train the linear regression model
y_pred = model.predict(X_test)
# Make predictions on the test set
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Evaluate model performance
print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared: {r2:.2f}")


plt.figure(figsize=(12, 6))

# Plot the regression line (training data)
plt.subplot(1, 2, 1)
plt.scatter(X_train, y_train, color='blue', label='Training Data')
plt.plot(X_train, model.predict(X_train), color='red', linewidth=2, label='Regression Line')
plt.title('Regression Line on Training Data')
plt.xlabel('Feature')
plt.ylabel('Target')
plt.legend()

# Plot actual vs. predicted values
plt.subplot(1, 2, 2)
plt.scatter(y_test, y_pred, color='green', label='Test Data')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', linewidth=2, label='Ideal Fit')
plt.title('Actual vs. Predicted')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.legend()

plt.tight_layout()
plt.show()
